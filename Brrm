local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local playerGui = LocalPlayer:WaitForChild("PlayerGui")

local screenGui = Instance.new("ScreenGui")
screenGui.Name = "CompleteUI"
screenGui.ResetOnSpawn = false
screenGui.Parent = playerGui

local colors = {
    background = Color3.fromRGB(40, 35, 30),
    primary = Color3.fromRGB(255, 120, 50),
    secondary = Color3.fromRGB(70, 50, 40),
    accent = Color3.fromRGB(255, 150, 80),
    text = Color3.fromRGB(240, 240, 240),
    toggleOn = Color3.fromRGB(100, 200, 100),
    toggleOff = Color3.fromRGB(200, 80, 80),
    dropdownToggleOn = Color3.fromRGB(255, 140, 60),
    dropdownToggleOff = Color3.fromRGB(180, 80, 50),
    sliderTrack = Color3.fromRGB(80, 60, 50),
    sliderFill = Color3.fromRGB(255, 140, 60),
    inputBackground = Color3.fromRGB(50, 40, 35),
    light = Color3.fromRGB(80, 60, 50),
    border = Color3.fromRGB(100, 70, 50),
    tabActive = Color3.fromRGB(255, 120, 50),
    tabInactive = Color3.fromRGB(70, 50, 40),
    notification = Color3.fromRGB(255, 100, 50),
    dropdownClose = Color3.fromRGB(255, 80, 40),
    reopenButton = Color3.fromRGB(255, 100, 50),
    labelDefault = Color3.fromRGB(240, 240, 240),
    labelTitle = Color3.fromRGB(255, 180, 100),
    labelWarning = Color3.fromRGB(255, 100, 100),
    labelSuccess = Color3.fromRGB(100, 255, 100),
    labelInfo = Color3.fromRGB(100, 180, 255),
    labelSection = Color3.fromRGB(255, 140, 60),
    dragOutline = Color3.fromRGB(255, 80, 40)
}

local function isMobile()
    return UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled
end

-- Notification System
local notificationFrame = Instance.new("Frame")
notificationFrame.Size = isMobile() and UDim2.new(0.9, 0, 0, 100) or UDim2.new(0, 320, 0, 90)
notificationFrame.Position = isMobile() and UDim2.new(0.5, 0, 0.5, 0) or UDim2.new(0.5, -160, 1, -100)
notificationFrame.AnchorPoint = Vector2.new(0.5, isMobile() and 0.5 or 0)
notificationFrame.BackgroundColor3 = colors.notification
notificationFrame.BorderSizePixel = 0
notificationFrame.Visible = false
notificationFrame.ZIndex = 1000
notificationFrame.Parent = screenGui

local notificationCorner = Instance.new("UICorner")
notificationCorner.CornerRadius = UDim.new(0, 8)
notificationCorner.Parent = notificationFrame

local notificationLabel = Instance.new("TextLabel")
notificationLabel.Size = UDim2.new(1, -20, 0.7, -5)
notificationLabel.Position = UDim2.new(0, 10, 0, 5)
notificationLabel.BackgroundTransparency = 1
notificationLabel.TextColor3 = colors.text
notificationLabel.Font = Enum.Font.GothamBold
notificationLabel.TextSize = isMobile() and 16 or 15
notificationLabel.TextWrapped = true
notificationLabel.TextXAlignment = Enum.TextXAlignment.Left
notificationLabel.TextYAlignment = Enum.TextYAlignment.Top
notificationLabel.ClipsDescendants = true
notificationLabel.ZIndex = 1002
notificationLabel.Parent = notificationFrame

local notificationSubLabel = Instance.new("TextLabel")
notificationSubLabel.Size = UDim2.new(1, -20, 0.3, -5)
notificationSubLabel.Position = UDim2.new(0, 10, 0.7, 0)
notificationSubLabel.BackgroundTransparency = 1
notificationSubLabel.TextColor3 = colors.text
notificationSubLabel.Font = Enum.Font.Gotham
notificationSubLabel.TextSize = isMobile() and 14 or 12
notificationSubLabel.Text = "NOTIFICATION"
notificationSubLabel.TextXAlignment = Enum.TextXAlignment.Left
notificationSubLabel.ZIndex = 1002
notificationSubLabel.Parent = notificationFrame

local function showNotification(message, duration)
    notificationLabel.Text = message
    notificationFrame.Visible = true
    
    if isMobile() then
        notificationFrame.Position = UDim2.new(0.5, 0, 0.5, 100)
        TweenService:Create(notificationFrame, TweenInfo.new(0.3), {Position = UDim2.new(0.5, 0, 0.5, 0)}):Play()
    else
        notificationFrame.Position = UDim2.new(0.5, -160, 1, 100)
        TweenService:Create(notificationFrame, TweenInfo.new(0.3), {Position = UDim2.new(0.5, -160, 1, -100)}):Play()
    end
    
    if duration then
        task.delay(duration, function()
            if isMobile() then
                TweenService:Create(notificationFrame, TweenInfo.new(0.3), {Position = UDim2.new(0.5, 0, 0.5, 100)}):Play()
            else
                TweenService:Create(notificationFrame, TweenInfo.new(0.3), {Position = UDim2.new(0.5, -160, 1, 100)}):Play()
            end
            task.wait(0.3)
            notificationFrame.Visible = false
        end)
    end
end

-- Main Frame with Visible Drag Outlines
local frame = Instance.new("Frame")
frame.Size = isMobile() and UDim2.new(0, 380, 0, 500) or UDim2.new(0, 350, 0, 450)
frame.Position = UDim2.new(0.5, isMobile() and -190 or -175, 0.5, isMobile() and -250 or -225)
frame.AnchorPoint = Vector2.new(0.5, 0.5)
frame.BackgroundColor3 = colors.background
frame.BorderSizePixel = 0
frame.Parent = screenGui

local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0, 8)
corner.Parent = frame

local border = Instance.new("UIStroke")
border.Color = colors.border
border.Thickness = 1
border.Parent = frame

-- Visible Drag Outlines
local leftDrag = Instance.new("Frame")
leftDrag.Size = UDim2.new(0, 12, 1, -50)
leftDrag.Position = UDim2.new(0, 0, 0, 30)
leftDrag.BackgroundColor3 = colors.dragOutline
leftDrag.BackgroundTransparency = 0.7
leftDrag.BorderSizePixel = 0
leftDrag.ZIndex = 2
leftDrag.Parent = frame

local rightDrag = Instance.new("Frame")
rightDrag.Size = UDim2.new(0, 12, 1, -50)
rightDrag.Position = UDim2.new(1, -12, 0, 30)
rightDrag.BackgroundColor3 = colors.dragOutline
rightDrag.BackgroundTransparency = 0.7
rightDrag.BorderSizePixel = 0
rightDrag.ZIndex = 2
rightDrag.Parent = frame

local bottomDrag = Instance.new("Frame")
bottomDrag.Size = UDim2.new(1, 0, 0, 12)
bottomDrag.Position = UDim2.new(0, 0, 1, -12)
bottomDrag.BackgroundColor3 = colors.dragOutline
bottomDrag.BackgroundTransparency = 0.7
bottomDrag.BorderSizePixel = 0
bottomDrag.ZIndex = 2
bottomDrag.Parent = frame

-- Title Bar
local titleBar = Instance.new("Frame")
titleBar.Size = UDim2.new(1, 0, 0, 30)
titleBar.BackgroundColor3 = colors.primary
titleBar.BorderSizePixel = 0
titleBar.ZIndex = 2
titleBar.Parent = frame

local titleCorner = Instance.new("UICorner")
titleCorner.CornerRadius = UDim.new(0, 8)
titleCorner.Parent = titleBar

local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, -50, 1, 0)
title.Position = UDim2.new(0, 10, 0, 0)
title.BackgroundTransparency = 1
title.TextColor3 = colors.text
title.Font = Enum.Font.GothamBold
title.TextSize = isMobile() and 18 or 16
title.Text = "Complete UI"
title.TextXAlignment = Enum.TextXAlignment.Left
title.ZIndex = 3
title.Parent = titleBar

-- Close Button with Rounded Corners
local closeBtn = Instance.new("TextButton")
closeBtn.Size = isMobile() and UDim2.new(0, 35, 0, 35) or UDim2.new(0, 25, 0, 25)
closeBtn.Position = UDim2.new(1, isMobile() and -40 or -30, 0.5, isMobile() and -17.5 or -12.5)
closeBtn.Text = "×"
closeBtn.Font = Enum.Font.GothamBold
closeBtn.TextSize = isMobile() and 24 or 18
closeBtn.TextColor3 = colors.text
closeBtn.BackgroundColor3 = colors.primary
closeBtn.BorderSizePixel = 0
closeBtn.ZIndex = 3
closeBtn.Parent = titleBar

local closeCorner = Instance.new("UICorner")
closeCorner.CornerRadius = UDim.new(1, 0)
closeCorner.Parent = closeBtn

-- Reopen Button
local reopenButton = Instance.new("TextButton")
reopenButton.Size = isMobile() and UDim2.new(0, 60, 0, 60) or UDim2.new(0, 50, 0, 50)
reopenButton.Position = UDim2.new(1, isMobile() and -70 or -60, 1, isMobile() and -70 or -60)
reopenButton.Text = "☰"
reopenButton.Font = Enum.Font.GothamBold
reopenButton.TextSize = isMobile() and 28 or 24
reopenButton.TextColor3 = colors.text
reopenButton.BackgroundColor3 = colors.reopenButton
reopenButton.BorderSizePixel = 0
reopenButton.Visible = false
reopenButton.ZIndex = 10
reopenButton.Parent = screenGui

local reopenCorner = Instance.new("UICorner")
reopenCorner.CornerRadius = UDim.new(1, 0)
reopenCorner.Parent = reopenButton

-- Tab System
local tabButtons = {}
local tabFrames = {}
local tabsContainer = Instance.new("Frame")
tabsContainer.Size = UDim2.new(1, -10, 0, 40)
tabsContainer.Position = UDim2.new(0, 5, 0, 35)
tabsContainer.BackgroundTransparency = 1
tabsContainer.Parent = frame

local tabsScrolling = Instance.new("ScrollingFrame")
tabsScrolling.Size = UDim2.new(1, 0, 1, 0)
tabsScrolling.BackgroundTransparency = 1
tabsScrolling.ScrollBarThickness = 5
tabsScrolling.ScrollBarImageColor3 = colors.primary
tabsScrolling.AutomaticCanvasSize = Enum.AutomaticSize.X
tabsScrolling.Parent = tabsContainer

local tabsLayout = Instance.new("UIListLayout")
tabsLayout.FillDirection = Enum.FillDirection.Horizontal
tabsLayout.Padding = UDim.new(0, 5)
tabsLayout.Parent = tabsScrolling

-- Content Frame
local contentFrame = Instance.new("ScrollingFrame")
contentFrame.Size = UDim2.new(1, -10, 1, isMobile() and -100 or -80)
contentFrame.Position = UDim2.new(0, 5, 0, 80)
contentFrame.BackgroundTransparency = 1
contentFrame.ScrollBarThickness = isMobile() and 8 or 5
contentFrame.ScrollBarImageColor3 = colors.primary
contentFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
contentFrame.Parent = frame

local contentLayout = Instance.new("UIListLayout")
contentLayout.Padding = UDim.new(0, isMobile() and 12 or 8)
contentLayout.SortOrder = Enum.SortOrder.LayoutOrder
contentLayout.Parent = contentFrame

-- UI Component Functions
local function createLabel(parent, text, size, labelType)
    local labelTypes = {
        default = {color = colors.labelDefault, bold = false},
        title = {color = colors.labelTitle, bold = true},
        warning = {color = colors.labelWarning, bold = true},
        success = {color = colors.labelSuccess, bold = true},
        info = {color = colors.labelInfo, bold = false},
        section = {color = colors.labelSection, bold = true}
    }
    
    local settings = labelTypes[labelType or "default"]
    
    local label = Instance.new("TextLabel")
    label.Size = size or UDim2.new(1, 0, 0, isMobile() and 25 or 20)
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextColor3 = settings.color
    label.Font = settings.bold and Enum.Font.GothamBold or Enum.Font.Gotham
    label.TextSize = settings.bold and (isMobile() and 18 or 16) or (isMobile() and 16 or 14)
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.LayoutOrder = #parent:GetChildren()
    label.Parent = parent
    
    if labelType == "section" then
        label.TextXAlignment = Enum.TextXAlignment.Center
        label.TextSize = isMobile() and 18 or 16
        local padding = Instance.new("UIPadding")
        padding.PaddingTop = UDim.new(0, 10)
        padding.Parent = label
    end
    
    return label
end

local function createButton(parent, text, callback)
    local btn = Instance.new("TextButton")
    btn.Size = UDim2.new(1, 0, 0, isMobile() and 45 or 35)
    btn.Text = text
    btn.Font = Enum.Font.GothamBold
    btn.TextSize = isMobile() and 16 or 14
    btn.TextColor3 = colors.text
    btn.BackgroundColor3 = colors.primary
    btn.BorderSizePixel = 0
    btn.LayoutOrder = #parent:GetChildren()

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 6)
    corner.Parent = btn

    btn.MouseButton1Click:Connect(function()
        callback()
        showNotification(text .. " ACTIVATED\nAction completed successfully", 2)
    end)

    btn.Parent = parent
    return btn
end

local function createToggle(parent, text, default, callback, isDropdownToggle)
    local toggleFrame = Instance.new("Frame")
    toggleFrame.Size = UDim2.new(1, 0, 0, isMobile() and 40 or 30)
    toggleFrame.BackgroundTransparency = 1
    toggleFrame.LayoutOrder = #parent:GetChildren()

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(0.7, 0, 1, 0)
    label.Position = UDim2.new(0, 0, 0, 0)
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextColor3 = colors.text
    label.Font = Enum.Font.Gotham
    label.TextSize = isMobile() and 16 or 14
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = toggleFrame

    local btn = Instance.new("TextButton")
    btn.Size = UDim2.new(0.3, 0, 1, 0)
    btn.Position = UDim2.new(0.7, 0, 0, 0)
    btn.Text = default and "ON" or "OFF"
    btn.Font = Enum.Font.GothamBold
    btn.TextSize = isMobile() and 16 or 14
    btn.TextColor3 = colors.text
    btn.BackgroundColor3 = isDropdownToggle and (default and colors.dropdownToggleOn or colors.dropdownToggleOff) 
                          or (default and colors.toggleOn or colors.toggleOff)
    btn.BorderSizePixel = 0
    btn.AutoButtonColor = false

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 6)
    corner.Parent = btn

    btn.MouseButton1Click:Connect(function()
        local newState = not (btn.Text == "ON")
        btn.Text = newState and "ON" or "OFF"
        btn.BackgroundColor3 = isDropdownToggle and (newState and colors.dropdownToggleOn or colors.dropdownToggleOff)
                              or (newState and colors.toggleOn or colors.toggleOff)
        callback(newState)
        showNotification(text .. " " .. (newState and "ENABLED" or "DISABLED") .. "\nFeature status updated", 2)
    end)

    btn.Parent = toggleFrame
    toggleFrame.Parent = parent
    return btn
end

local function createSlider(parent, text, min, max, default, callback)
    local sliderFrame = Instance.new("Frame")
    sliderFrame.Size = UDim2.new(1, 0, 0, isMobile() and 60 or 40)
    sliderFrame.BackgroundTransparency = 1
    sliderFrame.LayoutOrder = #parent:GetChildren()
    
    local label = createLabel(sliderFrame, text .. ": " .. default, UDim2.new(1, 0, 0, isMobile() and 25 or 20))
    
    local track = Instance.new("Frame")
    track.Size = UDim2.new(1, 0, 0, isMobile() and 12 or 8)
    track.Position = UDim2.new(0, 0, 0, isMobile() and 35 or 25)
    track.BackgroundColor3 = colors.sliderTrack
    track.BorderSizePixel = 0
    
    local trackCorner = Instance.new("UICorner")
    trackCorner.CornerRadius = UDim.new(0, 5)
    trackCorner.Parent = track
    
    local fill = Instance.new("Frame")
    fill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
    fill.BackgroundColor3 = colors.sliderFill
    fill.BorderSizePixel = 0
    
    local fillCorner = Instance.new("UICorner")
    fillCorner.CornerRadius = UDim.new(0, 5)
    fillCorner.Parent = fill
    
    local handle = Instance.new("TextButton")
    handle.Size = UDim2.new(0, isMobile() and 20 or 15, 0, isMobile() and 20 or 15)
    handle.Position = UDim2.new(fill.Size.X.Scale, isMobile() and -10 or -7.5, 0.5, isMobile() and -10 or -7.5)
    handle.Text = ""
    handle.BackgroundColor3 = colors.primary
    handle.BorderSizePixel = 0
    handle.AutoButtonColor = false
    
    local handleCorner = Instance.new("UICorner")
    handleCorner.CornerRadius = UDim.new(1, 0)
    handleCorner.Parent = handle
    
    fill.Parent = track
    handle.Parent = track
    track.Parent = sliderFrame
    sliderFrame.Parent = parent
    
    local isDragging = false
    
    local function updateSlider(input)
        local xOffset = math.clamp((input.Position.X - track.AbsolutePosition.X) / track.AbsoluteSize.X, 0, 1)
        local value = math.floor(min + (max - min) * xOffset)
        
        fill.Size = UDim2.new(xOffset, 0, 1, 0)
        handle.Position = UDim2.new(xOffset, isMobile() and -10 or -7.5, 0.5, isMobile() and -10 or -7.5)
        label.Text = text .. ": " .. value
        
        callback(value)
    end
    
    handle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            isDragging = true
            updateSlider(input)
        end
    end)
    
    handle.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            isDragging = false
        end
    end)
    
    track.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            isDragging = true
            updateSlider(input)
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if isDragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            updateSlider(input)
        end
    end)
    
    return sliderFrame
end

local function createDropdown(parent, text, options)
    local dropdownFrame = Instance.new("Frame")
    dropdownFrame.Size = UDim2.new(1, 0, 0, isMobile() and 45 or 35)
    dropdownFrame.BackgroundColor3 = colors.secondary
    dropdownFrame.AutomaticSize = Enum.AutomaticSize.Y
    dropdownFrame.LayoutOrder = #parent:GetChildren()

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 6)
    corner.Parent = dropdownFrame

    local stroke = Instance.new("UIStroke")
    stroke.Color = colors.border
    stroke.Thickness = 1
    stroke.Parent = dropdownFrame

    local layout = Instance.new("UIListLayout")
    layout.Padding = UDim.new(0, 5)
    layout.Parent = dropdownFrame

    local headerFrame = Instance.new("Frame")
    headerFrame.Size = UDim2.new(1, 0, 0, isMobile() and 45 or 35)
    headerFrame.BackgroundTransparency = 1
    headerFrame.LayoutOrder = 0
    headerFrame.Parent = dropdownFrame

    local header = Instance.new("TextButton")
    header.Size = UDim2.new(1, -50, 1, 0)
    header.Position = UDim2.new(0, 0, 0, 0)
    header.Text = text .. " ▼"
    header.Font = Enum.Font.GothamBold
    header.TextSize = isMobile() and 16 or 14
    header.TextColor3 = colors.text
    header.BackgroundColor3 = colors.secondary
    header.BorderSizePixel = 0
    header.AutoButtonColor = false

    local headerCorner = Instance.new("UICorner")
    headerCorner.CornerRadius = UDim.new(0, 6)
    headerCorner.Parent = header

    local headerStroke = Instance.new("UIStroke")
    headerStroke.Color = colors.border
    headerStroke.Thickness = 1
    headerStroke.Parent = header

    local closeButton = Instance.new("TextButton")
    closeButton.Size = UDim2.new(0, isMobile() and 40 or 30, 0, isMobile() and 40 or 30)
    closeButton.Position = UDim2.new(1, isMobile() and -45 or -35, 0.5, isMobile() and -20 or -15)
    closeButton.Text = "×"
    closeButton.Font = Enum.Font.GothamBold
    closeButton.TextSize = isMobile() and 22 or 18
    closeButton.TextColor3 = colors.text
    closeButton.BackgroundColor3 = colors.dropdownClose
    closeButton.BorderSizePixel = 0
    closeButton.ZIndex = 2

    local closeCorner = Instance.new("UICorner")
    closeCorner.CornerRadius = UDim.new(1, 0)
    closeCorner.Parent = closeButton

    local scrollFrame = Instance.new("ScrollingFrame")
    scrollFrame.Size = UDim2.new(1, 0, 0, 0)
    scrollFrame.Position = UDim2.new(0, 0, 0, isMobile() and 50 or 40)
    scrollFrame.BackgroundTransparency = 1
    scrollFrame.Visible = false
    scrollFrame.ScrollBarThickness = isMobile() and 8 or 5
    scrollFrame.ScrollBarImageColor3 = colors.primary
    scrollFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
    scrollFrame.ClipsDescendants = true
    scrollFrame.LayoutOrder = 1

    local contentFrame = Instance.new("Frame")
    contentFrame.Size = UDim2.new(1, 0, 0, 0)
    contentFrame.BackgroundTransparency = 1
    contentFrame.AutomaticSize = Enum.AutomaticSize.Y
    contentFrame.Parent = scrollFrame

    local contentLayout = Instance.new("UIListLayout")
    contentLayout.Padding = UDim.new(0, 5)
    contentLayout.Parent = contentFrame

    contentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        contentFrame.Size = UDim2.new(1, 0, 0, contentLayout.AbsoluteContentSize.Y)
        scrollFrame.CanvasSize = UDim2.new(0, 0, 0, contentLayout.AbsoluteContentSize.Y)
    end)

    local isOpen = false

    local function animateDropdown()
        if isOpen then
            scrollFrame.Visible = true
            scrollFrame.Size = UDim2.new(1, 0, 0, 0)
            TweenService:Create(scrollFrame, TweenInfo.new(0.2), {Size = UDim2.new(1, 0, 0, math.min(contentLayout.AbsoluteContentSize.Y, isMobile() and 350 or 300))}):Play()
            TweenService:Create(header, TweenInfo.new(0.2), {BackgroundColor3 = colors.light}):Play()
            TweenService:Create(dropdownFrame, TweenInfo.new(0.2), {BackgroundColor3 = colors.light}):Play()
        else
            TweenService:Create(scrollFrame, TweenInfo.new(0.2), {Size = UDim2.new(1, 0, 0, 0)}):Play()
            TweenService:Create(header, TweenInfo.new(0.2), {BackgroundColor3 = colors.secondary}):Play()
            TweenService:Create(dropdownFrame, TweenInfo.new(0.2), {BackgroundColor3 = colors.secondary}):Play()
            task.wait(0.2)
            scrollFrame.Visible = false
        end
    end

    header.MouseButton1Click:Connect(function()
        isOpen = not isOpen
        header.Text = text .. (isOpen and " ▲" or " ▼")
        animateDropdown()
    end)

    closeButton.MouseButton1Click:Connect(function()
        if isOpen then
            isOpen = false
            header.Text = text .. " ▼"
            animateDropdown()
        end
    end)

    header.Parent = headerFrame
    closeButton.Parent = headerFrame
    scrollFrame.Parent = dropdownFrame
    dropdownFrame.Parent = parent

    return {
        addButton = function(text, callback)
            local btn = createButton(contentFrame, text, callback)
            return btn
        end,
        addToggle = function(text, default, callback)
            local toggle = createToggle(contentFrame, text, default, callback, true)
            return toggle
        end,
        addLabel = function(text, labelType)
            local label = createLabel(contentFrame, text, nil, labelType)
            return label
        end,
        addSlider = function(text, min, max, default, callback)
            local slider = createSlider(contentFrame, text, min, max, default, callback)
            return slider
        end,
        frame = dropdownFrame
    }
end

-- Tab Creation Function
local function createTab(name)
    local tabButton = Instance.new("TextButton")
    tabButton.Size = UDim2.new(0, isMobile() and 110 or 100, 1, 0)
    tabButton.Text = name
    tabButton.Font = Enum.Font.GothamBold
    tabButton.TextSize = isMobile() and 16 or 14
    tabButton.TextColor3 = colors.text
    tabButton.BackgroundColor3 = colors.tabInactive
    tabButton.BorderSizePixel = 0
    tabButton.AutoButtonColor = false
    
    local tabCorner = Instance.new("UICorner")
    tabCorner.CornerRadius = UDim.new(0, 6)
    tabCorner.Parent = tabButton
    
    local tabFrame = Instance.new("Frame")
    tabFrame.Size = UDim2.new(1, 0, 1, 0)
    tabFrame.BackgroundTransparency = 1
    tabFrame.Visible = false
    
    local tabContentLayout = Instance.new("UIListLayout")
    tabContentLayout.Padding = UDim.new(0, isMobile() and 12 or 8)
    tabContentLayout.Parent = tabFrame
    
    tabButton.MouseButton1Click:Connect(function()
        for _, frame in pairs(tabFrames) do
            frame.Visible = false
        end
        for _, button in pairs(tabButtons) do
            button.BackgroundColor3 = colors.tabInactive
        end
        tabFrame.Visible = true
        tabButton.BackgroundColor3 = colors.tabActive
        showNotification("Switched to " .. name .. " tab\nAccess all " .. name .. " features here", 2)
    end)
    
    tabButtons[name] = tabButton
    tabFrames[name] = tabFrame
    
    tabButton.Parent = tabsScrolling
    tabFrame.Parent = contentFrame
    
    return tabFrame
end

-- Make sure the UI is properly sized
tabsLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
    tabsScrolling.CanvasSize = UDim2.new(0, tabsLayout.AbsoluteContentSize.X, 0, 0)
end)

contentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
    contentFrame.CanvasSize = UDim2.new(0, 0, 0, contentLayout.AbsoluteContentSize.Y + 10)
end)

-- Keybind to toggle UI
local toggleKey = Enum.KeyCode.RightControl
local uiVisible = true

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == toggleKey then
        uiVisible = not uiVisible
        frame.Visible = uiVisible
        reopenButton.Visible = not uiVisible
        showNotification("UI " .. (uiVisible and "SHOWN" or "HIDDEN") .. "\n" .. (uiVisible and "Press RightControl to hide" or "Press RightControl or tap ☰ to show"), 2)
    end
end)

-- Make frame draggable from all edges
local dragging
local dragInput
local dragStart
local startPos

local function updateInput(input)
    local delta = input.Position - dragStart
    frame.Position = UDim2.new(
        startPos.X.Scale, 
        startPos.X.Offset + delta.X,
        startPos.Y.Scale, 
        startPos.Y.Offset + delta.Y
    )
end

local function connectDrag(framePart)
    framePart.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
end

connectDrag(titleBar)
connectDrag(leftDrag)
connectDrag(rightDrag)
connectDrag(bottomDrag)

frame.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        updateInput(input)
    end
end)

closeBtn.MouseButton1Click:Connect(function()
    frame.Visible = false
    reopenButton.Visible = true
    showNotification("UI has been hidden\nTap the ☰ button to reopen the menu", 3)
end)

reopenButton.MouseButton1Click:Connect(function()
    frame.Visible = true
    reopenButton.Visible = false
    showNotification("UI has been restored\nYou can now access all features", 2)
end)

-- Add content to tools tab
createLabel(toolsTab, "UTILITIES", UDim2.new(1, 0, 0, isMobile() and 30 or 25), "section")
createButton(toolsTab, "Refresh UI", function() end)
createButton(toolsTab, "Export Settings", function() end)
createButton(toolsTab, "Help", function()
    showNotification("Open the documentation for help", 3)
end)

-- 🔥 PLOT UTILITIES SECTION
createLabel(toolsTab, "PLOT UTILITIES", UDim2.new(1, 0, 0, isMobile() and 30 or 25), "section")

-- Define plots
local plotList = {
    ["Plot A"] = workspace.Plots["a9bc8e0f-644a-4a85-a296-4a950ca7eea9"],
    ["Plot B"] = workspace.Plots["c3a348b5-fdd3-49af-b36e-89c38cb7fd4a"],
    ["Plot C"] = workspace.Plots["b43399cd-ace7-42fe-9388-f60ad66e93dc"],
    ["Plot D"] = workspace.Plots["c7baff99-6111-4da3-9067-4fcd059f94b4"]
}

local selectedPlot = nil
local currentHighlight = nil

-- ESP function
local function highlightPlot(plot)
    if currentHighlight then currentHighlight:Destroy() end
    local hl = Instance.new("Highlight")
    hl.Adornee = plot
    hl.FillColor = Color3.fromRGB(255, 100, 100)
    hl.OutlineColor = Color3.fromRGB(255, 0, 0)
    hl.FillTransparency = 0.5
    hl.Parent = plot
    currentHighlight = hl
end

-- Dropdown for selecting plot
local plotDropdown = createDropdown(toolsTab, "Select Plot")
for name, plot in pairs(plotList) do
    plotDropdown.addButton(name, function()
        selectedPlot = plot
        highlightPlot(plot)
        showNotification("Selected: " .. name, 2)
    end)
end

-- Button to customize StealHitbox
createButton(toolsTab, "Customize StealHitbox", function()
    if selectedPlot then
        local hitbox = selectedPlot:FindFirstChild("StealHitbox")
        if hitbox and hitbox:IsA("BasePart") then
            hitbox.Color = Color3.fromRGB(255, 0, 0)
            hitbox.Material = Enum.Material.Neon
            hitbox.Size += Vector3.new(1, 1, 1)
            hitbox.Transparency = 0.25
            showNotification("StealHitbox customized ✅", 2)
        else
            showNotification("❌ No StealHitbox found in selected plot", 3)
        end
    else
        showNotification("⚠️ Select a plot first!", 2)
    end
end)
